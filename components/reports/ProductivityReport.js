import React from 'react';
import { 
  Box, 
  Grid, 
  GridItem, 
  Text,
  Heading,
  SimpleGrid,
} from '@chakra-ui/react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend,
  ResponsiveContainer,
  LineChart,
  Line,
} from 'recharts';
import StatCard from '../StatCard';
import ChartCard from '../ChartCard';
import { useCopilot } from '../../lib/CopilotContext';
import { CHART_COLORS } from '../../lib/config';
import { formatNumber, formatCurrency } from '../../lib/utils';

const ProductivityReport = () => {
  const { orgData, metrics, dateRange } = useCopilot();
  
  if (!orgData || !metrics) {
    return (
      <Box p={4}>
        <Text>No data available. Please make sure you're authenticated and have selected a valid organization.</Text>
      </Box>
    );
  }

  // Mock data for productivity time savings - in a real implementation this would come from additional APIs
  const mockProductivityData = [
    { name: 'Week 1', withCopilot: 4.2, withoutCopilot: 7.5 },
    { name: 'Week 2', withCopilot: 3.9, withoutCopilot: 7.2 },
    { name: 'Week 3', withCopilot: 3.6, withoutCopilot: 7.3 },
    { name: 'Week 4', withCopilot: 3.3, withoutCopilot: 7.4 },
  ];

  // Mock data for productivity metrics
  const mockTeamProductivity = [
    { name: 'Team A', prMergeTime: 18, linesOfCode: 2400 },
    { name: 'Team B', prMergeTime: 12, linesOfCode: 3200 },
    { name: 'Team C', prMergeTime: 15, linesOfCode: 2800 },
    { name: 'Team D', prMergeTime: 10, linesOfCode: 3500 },
  ];
  
  return (
    <Box>
      <Heading size="lg" mb={6}>Productivity Improvement Report</Heading>
      <Text mb={6}>This report assesses how Copilot impacts development speed and efficiency.</Text>

      <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6} mb={6}>
        <StatCard 
          title="Lines of Code Accepted" 
          value={formatNumber(metrics.acceptedLines)}
          helpText="Generated by Copilot and accepted"
        />
        <StatCard 
          title="Hours Saved" 
          value={formatNumber(Math.round(metrics.roi.hoursSaved))}
          helpText="Estimated developer time saved"
        />
        <StatCard 
          title="Cost Savings" 
          value={formatCurrency(metrics.roi.moneySaved)}
          helpText="Based on average hourly rates"
        />
        <StatCard 
          title="Avg. Lines per User" 
          value={formatNumber(Math.round(metrics.acceptedLines / metrics.totalActiveUsers))}
          helpText="Accepted Copilot code per user"
        />
      </SimpleGrid>

      <Grid templateColumns={{ base: "1fr", lg: "1fr 1fr" }} gap={6}>
        <GridItem>
          <ChartCard 
            title="Development Time Comparison" 
            description="Average time to complete tasks with and without Copilot"
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={mockProductivityData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis label={{ value: 'Hours', angle: -90, position: 'insideLeft' }} />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="withCopilot" stroke={CHART_COLORS.primary} name="With Copilot" />
                <Line type="monotone" dataKey="withoutCopilot" stroke={CHART_COLORS.quaternary} name="Without Copilot" />
              </LineChart>
            </ResponsiveContainer>
          </ChartCard>
        </GridItem>
        
        <GridItem>
          <ChartCard 
            title="Team Productivity Metrics" 
            description="PR merge times vs. lines of code generated"
          >
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={mockTeamProductivity} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis yAxisId="left" orientation="left" />
                <YAxis yAxisId="right" orientation="right" />
                <Tooltip />
                <Legend />
                <Bar yAxisId="left" dataKey="prMergeTime" fill={CHART_COLORS.tertiary} name="PR Merge Time (hours)" />
                <Bar yAxisId="right" dataKey="linesOfCode" fill={CHART_COLORS.secondary} name="Lines of Code" />
              </BarChart>
            </ResponsiveContainer>
          </ChartCard>
        </GridItem>
      </Grid>
    </Box>
  );
};

export default ProductivityReport;