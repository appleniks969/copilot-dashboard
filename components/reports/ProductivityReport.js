import React from 'react';
import { 
  Box, 
  Text,
  Heading,
  SimpleGrid,
  Flex,
  Divider,
} from '@chakra-ui/react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts';
import StatCard from '../StatCard';
import ChartCard from '../ChartCard';
import { useCopilot } from '../../lib/CopilotContext';
import { CHART_COLORS } from '../../lib/config';
import { formatNumber, formatPercentage, formatCurrency } from '../../lib/utils';

const ProductivityReport = () => {
  const { metrics } = useCopilot();
  
  if (!metrics) {
    return (
      <Box p={4}>
        <Text>No data available. Please make sure you're authenticated and have selected a valid organization and team.</Text>
      </Box>
    );
  }

  // Prepare data for the acceptance rate pie chart
  const acceptanceData = [
    { name: 'Accepted', value: metrics.acceptedSuggestions },
    { name: 'Not Accepted', value: metrics.totalSuggestions - metrics.acceptedSuggestions },
  ];

  // Prepare data for language comparison
  const languageData = metrics.languages && metrics.languages.length > 0 
    ? metrics.languages
        .map(lang => ({
          name: lang.name,
          acceptedSuggestions: lang.total_acceptances || 0,
          acceptedLines: lang.total_lines_accepted || 0,
        }))
        .sort((a, b) => b.acceptedLines - a.acceptedLines)
        .slice(0, 5)  // Top 5 languages
    : [];

  // Colors for the pie chart
  const COLORS = [CHART_COLORS.primary, CHART_COLORS.gray];
  
  return (
    <Box>
      <Heading size="lg" mb={6}>Productivity Metrics</Heading>
      <Text mb={6}>This report shows how Copilot is being used and its impact on productivity.</Text>

      <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6} mb={6}>
        <StatCard 
          title="Lines of Code Accepted" 
          value={formatNumber(metrics.acceptedLines || 0)}
          helpText="Generated by Copilot and accepted"
        />
        <StatCard 
          title="Total Suggestions" 
          value={formatNumber(metrics.totalSuggestions || 0)}
          helpText="Number of code suggestions"
        />
        <StatCard 
          title="Acceptance Rate" 
          value={formatPercentage(metrics.acceptanceRate || 0)}
          helpText="Percentage of suggestions accepted"
        />
        <StatCard 
          title="Avg. Lines per User" 
          value={formatNumber(metrics.totalActiveUsers ? Math.round(metrics.acceptedLines / metrics.totalActiveUsers) : 0)}
          helpText="Accepted Copilot code per user"
        />
      </SimpleGrid>

      <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={6} mb={6}>
        <ChartCard 
          title="Suggestion Acceptance" 
          description="Ratio of accepted to total suggestions"
        >
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={acceptanceData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${formatPercentage(percent * 100)}`}
                outerRadius={100}
                fill="#8884d8"
                dataKey="value"
              >
                {acceptanceData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip formatter={(value) => formatNumber(value)} />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </ChartCard>

        {languageData.length > 0 && (
          <ChartCard 
            title="Top Languages by Accepted Code" 
            description="Languages with the most accepted Copilot suggestions"
          >
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={languageData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip formatter={(value) => formatNumber(value)} />
                <Legend />
                <Bar dataKey="acceptedLines" fill={CHART_COLORS.primary} name="Lines of Code Accepted" />
                <Bar dataKey="acceptedSuggestions" fill={CHART_COLORS.secondary} name="Suggestions Accepted" />
              </BarChart>
            </ResponsiveContainer>
          </ChartCard>
        )}
      </SimpleGrid>

      {/* Only show ROI section if we have the necessary data */}
      {metrics.roi && metrics.roi.hoursSaved > 0 && (
        <>
          <Divider my={6} />
          <Heading size="md" mb={4}>Return on Investment</Heading>
          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
            <StatCard 
              title="Hours Saved" 
              value={formatNumber(Math.round(metrics.roi.hoursSaved || 0))}
              helpText="Estimated time saved based on accepted lines"
            />
            <StatCard 
              title="Cost Savings" 
              value={formatCurrency(metrics.roi.moneySaved || 0)}
              helpText="Based on average hourly rates"
            />
            <StatCard 
              title="ROI" 
              value={formatPercentage(metrics.roi.roiPercentage || 0)}
              helpText="Return on investment percentage"
            />
          </SimpleGrid>
        </>
      )}
    </Box>
  );
};

export default ProductivityReport;